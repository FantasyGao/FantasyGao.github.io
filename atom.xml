<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FantasyGao&#39;s Blog</title>
  
  <subtitle>Trying to find the truth</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.oagao.cn/"/>
  <updated>2017-09-27T08:32:47.127Z</updated>
  <id>http://blog.oagao.cn/</id>
  
  <author>
    <name>FantasyGao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript 原型链</title>
    <link href="http://blog.oagao.cn/javascript_proto/2017/09/26/"/>
    <id>http://blog.oagao.cn/javascript_proto/2017/09/26/</id>
    <published>2017-09-26T03:07:45.244Z</published>
    <updated>2017-09-27T08:32:47.127Z</updated>
    
    <content type="html"><![CDATA[<h3 id="示意图："><a href="#示意图：" class="headerlink" title="示意图："></a>示意图：</h3><p><img src="https://github.com/FantasyGao/About_Node/blob/master/javascript_proto/proto.png?raw=true" alt="proto"></p><pre><code class="javascript">function Person(name){    this.name = name}var me = new Person(&#39;FantasyGao&#39;)var obj = {}</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>Object,Function,自定义函数类（Person）有prototype属性，其余没有</li><li>Function的peototype属性与<strong>proto</strong>属性指向同一内容(Function.<strong>proto</strong>===Function.prototype)</li><li>由构造函数生成的对象与直接定义的对象原型链有差异（me.<strong>proto</strong>.<strong>proto</strong>===obj.<strong>proto</strong>)</li><li>对象的constructor属性即它<strong>proto</strong>属性被prototype指向的值(me.constructor===Person,me.<strong>proto</strong>.constructor===Person)</li><li>任何对象由原型链查找到顶端为null(Object.prototype.<strong>proto</strong>===null)</li></ol><pre><code class="javascript">function Person(name){    this.name = name}Person.prototype.sayName = function(){    console.log(this===me)       //true     console.log(this.__proto__===Person.prototype)       //true     return this.name}var me = new Person(&#39;FantasyGao&#39;)var obj = {}me.sayName()console.log(me.constructor===Person)                                     //true  实例对象指向Personconsole.log(me.__proto__.constructor===Person)                           //true  实例对象的__proto__指向Objectconsole.log(obj.constructor===Object)                                    //true  定义对象指向Objectconsole.log(obj.__proto__.constructor===Object)                          //true  定义对象的__proto__指向Objectconsole.log(Person.constructor===Function)                               //true  构造函数对象指向Functionconsole.log(Person.__proto__.__proto__.constructor===Object)                     //true  构造函数对象的__proto__.__proto__指向Objectconsole.log(Person.__proto__.constructor===Function)                            //true Object.prototype的__proto__即nullconsole.log(Function.constructor===Function)                             //true  Function函数对象指向Functionconsole.log(Function.__proto__.constructor===Function)                   //true  Function函数对象的__proto__指Functionconsole.log(Object.constructor===Function)                               //true  Object指向Functionconsole.log(Object.__proto__.constructor===Function)                     //true  Object的__proto__指向Functionconsole.log(me.__proto__===Person.prototype)                              //true 实例对象的__proto__即构造函数的prototypeconsole.log(obj.__proto__===Object.prototype)                             //true 定义对象的__proto__即Object的prototypeconsole.log(Person.__proto__===Function.prototype)                        //true 构造函数对象的__proto__即Function的prototypeconsole.log(Object.__proto__===Function.prototype)                        //true Object的__proto__即Function的prototypeconsole.log(Function.__proto__===Function.prototype)                      //true Function的__proto__即Function的prototypeconsole.log(Function.prototype.__proto__===Object.prototype)              //true Function.prototype的__proto__即Object的prototypeconsole.log(me.__proto__.__proto__===Person.__proto__.__proto__)          //true 实例对象的__proto__的__proto__的__proto__即nullconsole.log(me.__proto__.__proto__===obj.__proto__)                       //true 实例对象的__proto__的__proto__的__proto__即nullconsole.log(Function.prototype.__proto__.__proto__===null)                //true Function.prototype的__proto__的__proto__即nullconsole.log(Person.__proto__.__proto__.__proto__===null)                  //true Object.prototype的__proto__即nullconsole.log(Object.prototype.__proto__===null)                            //true Object.prototype的__proto__即nullconsole.log(me.__proto__.__proto__.__proto__===null)                      //true 实例对象的__proto__的__proto__的__proto__即nullconsole.log(obj.__proto__.__proto__===null)                               //true 定义对象的__proto__的__proto__即nullconsole.log(me.prototype)                                                 //undefinedconsole.log(obj.prototype)                                                //undefinedconsole.log(Person.__proto__.prototype)                                   //undefinedconsole.log(me.__proto__.prototype)                                        //undefinedconsole.log(me.__proto__.__proto__.prototype)                                //undefined   console.log(typeof me) // objectconsole.log(typeof obj) // objectconsole.log(typeof Person) // functionconsole.log(typeof me.__proto__) // objectconsole.log(typeof obj.__proto__) // objectconsole.log(typeof Person.__proto__)  //functionconsole.log(typeof Function.__proto__)  //functionconsole.log(typeof Object.__proto__)  //function</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;示意图：&quot;&gt;&lt;a href=&quot;#示意图：&quot; class=&quot;headerlink&quot; title=&quot;示意图：&quot;&gt;&lt;/a&gt;示意图：&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://github.com/FantasyGao/About_Node/blob/master
      
    
    </summary>
    
    
  </entry>
  
</feed>
